{
  "name": "http-rewrite-middleware",
  "description": "Nginx-inspired (RegExp-based) HTTP Rewrite Middleware for the Connect and Express webservers.",
  "version": "0.1.1",
  "homepage": "https://github.com/viart/http-rewrite-middleware",
  "author": {
    "name": "Artem Vitiuk",
    "email": "artem@devart.in.ua"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:viart/http-rewrite-middleware.git"
  },
  "bugs": {
    "url": "https://github.com/viart/http-rewrite-middleware/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/viart/http-rewrite-middleware/blob/master/LICENSE-MIT"
    }
  ],
  "main": "index.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.7.1",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "grunt-contrib-connect",
    "grunt-express",
    "modrewrite",
    "rewriterule",
    "rewrite",
    "route",
    "connect",
    "express"
  ],
  "readme": "# http-rewrite-middleware v0.1.0 [![Build Status](https://travis-ci.org/viart/http-rewrite-middleware.png?branch=master)](https://travis-ci.org/viart/http-rewrite-middleware)\n\n> This module makes it possible to redirect (rewrite internally or redirect using HTTP codes) User to the specific URL based on RegExp Rules.\n> The designated successor of [grunt-connect-rewrite](https://github.com/viart/grunt-connect-rewrite).\n\n## Getting Started\n* Install the middleware by running:\n\n    ```shell\n    npm install http-rewrite-middleware --save\n    ```\n\n* Include the module:\n\n    ```js\n    var rewriteModule = require('http-rewrite-middleware');\n    ```\n\n* Define your rules like:\n\n    ```js\n    var rewriteMiddleware = rewriteModule.getMiddleware([\n        // Internal rewrite\n        {from: '^/index_dev.html$', to: '/src/index.html'},\n        // Internal rewrite\n        {from: '^/js/(.*)$', to: '/src/js/$1'},\n        // 301 Redirect\n        {from: '^/old-stuff/(.*)$', to: '/new-cool-stuff/$1', redirect: 'permanent'},\n        // 302 Redirect\n        {from: '^/stuff/(.*)$', to: '/temporary-stuff/$1', redirect: 'temporary'}\n    ]);\n    ```\n\n* See examples of integration with Connect / Express / Grunt bellow.\n\n### Options\n\n##### Rule's format:\n\n`{from: '__from__', to: '__to__'[, redirect: 'permanent'|'temporary']}`\n\nWhere:\n* `__from__` - RegExp string to match.\n* `__to__` - String that replaces matched URL.\n* `redirect` - Optional parameter:\n    * When it is omitted then the Rule will be dispatched as an internal rewrite (aka proxified).\n    * If the value is set then Browser will receive HTTP `Location` Header with value of parsed `__to__` (`permanent` value will give `HTTP 301`, any other value will give `HTTP 302`).\n\n### Example of usage with Connect\n\n```js\nvar connect = require('connect'),\n    http = require('http'),\n    rewriteModule = require('http-rewrite-middleware');\n\nvar app = connect()\n    .use(rewriteModule.getMiddleware([\n        // ... list of rules here\n    ])\n    .use(connect.static('public'));\n\nhttp.createServer(app).listen(3000);\n```\n\n### Example of usage with Express\n\n```js\nvar express = require('express'),\n    app = express(),\n    rewriteModule = require('http-rewrite-middleware');\n\napp.use(rewriteModule.getMiddleware([\n    // ... list of rules here\n]);\n\n//...\napp.listen(3000);\n```\n\n### Example of usage with Grunt ([grunt-contrib-connect](https://github.com/gruntjs/grunt-contrib-connect))\n\n```js\nvar rewriteModule = require('http-rewrite-middleware');\n\ngrunt.initConfig({\n    connect: {\n        options: {\n            port: 9000,\n            hostname: 'localhost'\n        },\n        development: {\n            options: {\n                middleware: function (connect, options) {\n                    return [\n                        // RewriteRules support\n                        rewriteModule.getMiddleware([\n                            // ... list of rules here\n                        ], grunt), // <-- passing `grunt` is optional and is used for native Grunt logging\n\n                        // mount filesystem\n                        connect.static(require('path').resolve(options.base))\n\n                        // ... any other middleware\n                    ];\n                }\n            }\n        }\n    }\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code.\n\n## Release History\n* 2013.12.17 `v0.1.1` Initial Release\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/viart/http-rewrite-middleware/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n",
  "readmeFilename": "README.md",
  "_id": "http-rewrite-middleware@0.1.1",
  "dist": {
    "shasum": "d5721aadf7ec3ef306fc499d817dbf86286efa0b"
  },
  "_from": "http-rewrite-middleware@",
  "_resolved": "https://registry.npmjs.org/http-rewrite-middleware/-/http-rewrite-middleware-0.1.1.tgz"
}
