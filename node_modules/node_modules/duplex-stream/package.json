{
  "name": "duplex-stream",
  "version": "0.1.0",
  "description": "Composable streams. Present a distinct readable stream and a distinct writable stream as a single Stream for reading/writing.",
  "keywords": [
    "duplex stream",
    "combined stream"
  ],
  "author": {
    "name": "Sam Day",
    "email": "sam.c.day@gmail.com"
  },
  "main": "./lib/duplexstream.js",
  "engines": {
    "node": ">= 0.3.0"
  },
  "dependencies": {
    "vows": ">= 0.5.6",
    "stream-buffers": ">= 0.2.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/samcday/node-duplex-stream.git"
  },
  "readme": "# Duplex Stream\r\n\r\nComposes two distinct readable and writable streams into one cohesive Stream. Why would you want to do this? I honestly have no idea. You'd have to be really stupid or something.\r\n\r\n## Installation\r\n\r\n\tnpm install duplex-stream\r\n\t\r\n## Usage\r\n\r\n\tvar DuplexStream = require(\"duplex-stream\");\r\n\r\n\tvar myDuplexStream = new DuplexStream(aReadableStream, aWritableStream);\r\n\t\r\n\t\r\nThe DuplexStream should behave exactly how you'd expect.\r\n\r\n\t// Probably because of this:\r\n\tconsole.log((new DuplexStream()) instanceof Stream);\t// -> true\r\n\r\nThat is, when events occur on the underlying streams, they occur on the DuplexStream.\r\n \r\n* When data is on the line from the underlying readable stream, the `data` event is emitted on DuplexStream\r\n* Writing to DuplexStream will write to the underlying writable stream.\r\n* Pausing/Resuming the DuplexStream will pause/resume the underlying readable stream.\r\n* Ending the DuplexStream will end the underlying writable, readable will still be available.\r\n* Setting encoding on DuplexStream will set encoding on underlying readable.\r\n* When `end` event occurs on underlying readable, DuplexStream marks itself as unreadable but can still be written to (if it's not already been ended).\r\n* Destroying the duplex stream will destroy both underlying streams.\r\n* Calling `destroySoon()` on the duplex stream will destroy readable stream immediately and tell writable stream to destroy as soon as it can.\r\n\r\nOne little \"gotcha\" though, `close` won't be emitted on the DuplexStream until both underlying streams are closed.\r\n\r\n## Derp?\r\n\r\nDuplexStream is just a silly little convenience. An (unnecessary) abstraction. I use it for composing automated tests that deal with Streams, along with my [node-stream-buffer](https://github.com/samcday/node-stream-buffer) project.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/samcday/node-duplex-stream/issues"
  },
  "_id": "duplex-stream@0.1.0",
  "dist": {
    "shasum": "80b761ebf920461f5a4b823f5bfdc2b1a2cdc31f"
  },
  "_from": "duplex-stream@>= 0.1.0",
  "_resolved": "https://registry.npmjs.org/duplex-stream/-/duplex-stream-0.1.0.tgz"
}
