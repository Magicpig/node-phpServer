{
  "name": "node-mac",
  "version": "0.1.3",
  "description": "Support daemon creation and management on Mac.",
  "keywords": [
    "ngn",
    "mac",
    "daemon",
    "service"
  ],
  "author": {
    "name": "Corey Butler",
    "email": "corey@coreybutler.com"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "main": "lib/node-mac.js",
  "dependencies": {
    "optimist": "~0.6.0",
    "plist": "~0.4.3"
  },
  "readmeFilename": "README.md",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/coreybutler/node-mac.git"
  },
  "license": "MIT",
  "readme": "[![NPM version](https://badge.fury.io/js/node-mac.png)](http://badge.fury.io/js/node-mac)\r\n[![NGN Dependencies](https://david-dm.org/coreybutler/node-mac.png)](https://david-dm.org/coreybutler/node-mac)\r\n[![Build](https://api.travis-ci.org/coreybutler/node-mac.png)](https://travis-ci.org/coreybutler/node-mac)\r\n\r\nFollow the author on [G+](https://plus.google.com/u/1/111169756342687497578?rel=author)\r\nor [Twitter (@goldglovecb)](http://twitter.com/goldglovecb).\r\n\r\nThis README provides a pretty good overview of what node-mac has to offer, but better\r\ndocumentation is now available at the [node-mac documentation portal](http://coreybutler.github.io/node-mac).\r\n\r\n# node-mac\r\n\r\nThis is a standalone module, originally designed for internal use in [NGN](http://github.com/thinkfirst/NGN).\r\nHowever; it is capable of providing the same features for Node.JS scripts\r\nindependently of NGN.\r\n\r\nFor alternative versions, see [node-windows](http://github.com/coreybutler/node-windows)\r\nand [node-linux](http://github.com/coreybutler/node-linux)\r\n\r\n## Overview\n\nThis module helps create/manage native processes and event logs for Node.js applications on Mac OSX.\n\n![Windows Mac](https://raw.github.com/coreybutler/node-mac/master/docs/helloworlddaemon.png)\n\nTo start, install node-mac via:\n\n    npm install node-mac\n\nnode-mac is a utility for creating/managing Node.js scripts as OSX daemons. Please note that like\nall OSX daemons, creating one requires sudo/root privileges. To create a service with\nnode-mac, prepare a script like:\n\n``` js\n    var Service = require('node-mac').Service;\n\n    // Create a new service object\n    var svc = new Service({\n      name:'Hello World',\n      description: 'The nodejs.org example web server.',\n      script: '/path/to/helloworld.js'\n    });\n\n    // Listen for the \"install\" event, which indicates the\n    // process is available as a service.\n    svc.on('install',function(){\n      svc.start();\n    });\n\n    svc.install();\n```\n\nThe code above creates a new `Service` object, providing a pretty name and description.\nThe `script` attribute identifies the Node.js script that should run as a service. Upon running\nthis, the script will be visible from the Activity Monitor.\n\nThe `Service` object emits the following events:\n\n- _install_ - Fired when the script is installed as a service.\n- _alreadyinstalled_ - Fired if the script is already known to be a service.\n- _invalidinstallation_ - Fired if an installation is detected but missing required files.\n- _uninstall_ - Fired when an uninstallation is complete.\n- _start_ - Fired when the new service is started.\n- _stop_ - Fired when the service is stopped.\n- _error_ - Fired in some instances when an error occurs.\n\nIn the example above, the script listens for the `install` event. Since this event\nis fired when a service installation is complete, it is safe to start the service.\n\nServices created by node-mac are similar to most other services running on OSX.\nThey can be stopped from the Activity Monitor and make logs available in the Console app.\n\n## Environment Variables\n\nSometimes you may want to provide a service with static data, passed in on creation of the service. You can do this by setting environment variables in the service config, as shown below:\n\n``` js\n    var svc = new Service({\n      name:'Hello World',\n      description: 'The nodejs.org example web server.',\n      script: '/path/to/helloworld.js',\n      env: {\n        name: \"HOME\",\n        value: process.env[\"USERPROFILE\"] // service is now able to access the user who created its home directory\n      }\n    });\n```\n\nYou can also supply an array to set multiple environment variables:\n\n``` js\n    var svc = new Service({\n      name:'Hello World',\n      description: 'The nodejs.org example web server.',\n      script: '/path/to/helloworld.js',\n      env: [{\n        name: \"HOME\",\n        value: process.env[\"USERPROFILE\"] // service is now able to access the user who created its home directory\n      },\n      {\n        name: \"TEMP\",\n        value: path.join(process.env[\"USERPROFILE\"],\"/temp\") // use a temp directory in user's home directory\n      }]\n    });\n```\n\n## Cleaning Up: Uninstall a Service\n\nUninstalling a previously created service is syntactically similar to installation.\n\n``` js\n    var Service = require('node-mac').Service;\n\n    // Create a new service object\n    var svc = new Service({\n      name:'Hello World',\n      script: require('path').join(__dirname,'helloworld.js')\n    });\n\n    // Listen for the \"uninstall\" event so we know when it's done.\n    svc.on('uninstall',function(){\n      console.log('Uninstall complete.');\n      console.log('The service exists: ',svc.exists);\n    });\n\n    // Uninstall the service.\n    svc.uninstall();\n```\n\nThe uninstall process only removes process-specific files. **It does NOT delete your Node.js script, but it will remove the logs!**\nThis process also removes the plist file for the service.\n\n## What Makes node-mac Services Unique?\n\nLots of things!\n\n**Long Running Processes & Monitoring:**\n\nThe built-in service recovery for OSX services is fairly limited and cannot easily be configured\nfrom code. Therefore, node-mac creates a wrapper around the Node.js script. This wrapper\nis responsible for restarting a failed service in an intelligent and configurable manner. For example,\nif your script crashes due to an unknown error, node-mac will attempt to restart it. By default,\nthis occurs every second. However; if the script has a fatal flaw that makes it crash repeatedly,\nit adds unnecessary overhead to the system. node-mac handles this by increasing the time interval\nbetween restarts and capping the maximum number of restarts.\n\n**Smarter Restarts That Won't Pummel Your Server:**\n\nUsing the default settings, node-mac adds 25% to the wait interval each time it needs to restart\nthe script. With the default setting (1 second), the first restart attempt occurs after one second.\nThe second occurs after 1.25 seconds. The third after 1.56 seconds (1.25 increased by 25%) and so on.\nBoth the initial wait time and the growth rate are configuration options that can be passed to a new\n`Service`. For example:\n\n``` js\n    var svc = new Service({\n      name:'Hello World',\n      description: 'The nodejs.org example web server.',\n      script: '/path/to/helloworld.js',\n      wait: 2,\n      grow: .5\n    });\n```\n\nIn this example, the wait period will start at 2 seconds and increase by 50%. So, the second attempt\nwould be 3 seconds later while the fourth would be 4.5 seconds later.\n\n**Don't DOS Yourself!**\n\nRepetitive recycling could potentially go on forever with a bad script. To handle these situations, node-mac\nsupports two kinds of caps. Using `maxRetries` will cap the maximum total number of times the service\nrestarts itself before it kills the process. By default, this is unlimited. Setting it to 3 would tell the\nprocess to stop restarting itself (i.e. leave the dead process alone) after it tries to restart it 3 times.\n\nAnother option is `maxRestarts`, which caps the number of restarts attempted within a 60 second period.\nFor example, if this is set to 3 (the default) and the process crashes/restarts repeatedly,\nnode-mac will stop restarting the process after the 3rd crash within a 60 second timeframe.\n\nBoth of these configuration options can be set, just like `wait` or `grow`.\n\nFinally, an attribute called `abortOnError` can be set to `true` if you want your script to **not** restart\nat all when it exits with an error.\n\n## How Services Are Made\n\nnode-mac uses the `launchd` utility to create a unique process\nfor each Node.js script deployed as a service. A plist file is created in `/Library/LaunchDaemons`\nby default. Additionally, two log files are generated in `/Library/Logs/<name>` for general output\nand error logging.\n\n## Event Logging\n\n![Mac log](https://raw.github.com/coreybutler/node-mac/master/docs/helloworldlog.png)\n\nServices created with node-mac have two event logs that can be viewed through the Console app.\nA log source named `myappname.log` provides basic logging for the service. It can be used to see\nwhen the entire service starts/stops. A second log, named `myappname_error.log` stores error output.\n\nBy default, any `console.log`, `console.warn`, `console.error` or other output will be made available\nin one of these two files.\n\n# License (MIT)\n\nCopyright (c) 2013 Corey Butler\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "bugs": {
    "url": "https://github.com/coreybutler/node-mac/issues"
  },
  "_id": "node-mac@0.1.3",
  "dist": {
    "shasum": "67560b422cfc5998bc0d727266608479739213bd"
  },
  "_from": "node-mac@",
  "_resolved": "https://registry.npmjs.org/node-mac/-/node-mac-0.1.3.tgz"
}
